Recursion:
    -A recursive method calls itself.
    -Requirements
        -Must have a base case which does not involve a recursive call.
        -The recursive call must somehow reduce the input.

    -examples
        -factorial
            4! = 4*3*2*1
            =24
            5! = 5*4*3*2*1
            =120
            0!=1
            n! = n*(n-1)!
        int fact(int n)
        {
            if(n==0)
                return 1; //Basecase
            return n*fact(n-1); //recursive
        }
        fact(4)=4*fact(3)=4*6=24
        fact(3)=3*fact(2)=3*2=6
        fact(2)=2*fact(1)=2*1=2
        fact(1)=1*fact(0)=1*1=1
        fact(0)=1

        1 1 2 3 5 8 13 21 34 (fibonacci sequence)

        /**@return the nth interger in the fibonacci sequence*/
        int fib(int n)
        {
        if(n<2)
            {return 1;} //base case

        return fib(n-1) + fib(n-2); //recursive call
        }

        fib(3)=fib(2) + fib(0)=2+1=3
        fib(2)=fib(1) +fib(0)=1+1=2

        fib(0)=1
        fib(1)=1
        fib(2)=2
        fib(3)=3
        fib(4)=5
        fib(5)=8

    -palindromes
        -Strings which read the same backwards as they do forwards
        -Examples
            -Radar
         -Racecar
         -madam im adam
         -a man a plan a canal panama

        /**@return true iff given string is a palindrome*/
        boolean pal(String s){
            if(s.length<2)//basecase
                {return true;}
            char firstChar=s.charAt(0);
            char lastChar=s.length()-1;
            if(firstChar!=lastChar)//basecase
                {return false;}
            return pal(s.substring(1,s.length()-1);

        }
    -Multiplication
        -multiplication can be done with repeated addition
        -Examples
            3*5=5+5+5
            x*y=y+(x+1)*y

                /**@return the product x * y */
                int mult(int x,int y)
                {
                if(x==0)
                    {return 0}//basecase
                return y+mult(x-1,y); //recursive call
                }
            3*5=
                mult(3,5)=5+mult(2,5)
                mult(1,5)=5+mult(0,5)=5+0=5
                mult(0,5)=0
    -List
        /**@return indexOf first occurence og given value, or -1 if not found */
        int indexOf(value);
        //sequential search
    -ArrayList
        public int indexOf(E value){
            return indexOf(0,value);
        }
        private int indexOf(int start, E valule){
            if(start==size){
            return -1;//not found //basecase
            }
            if(get(start).equals(value))
                {return start;} //basecase
            return indexOf(start+1,value);//recursive call

        }
    -LinkedList
        public int indexOf(E value){
            return indexOf(0,head.next,value)
        }
        private indexOf(int start, Node<E> ref, E value){
            if(ref==tail)
                {return -1;} //basecase
            if(ref.value.equals(value)){
                return start; //basecase
            }
            return indexOf(start+1,ref.next,value);
        }

